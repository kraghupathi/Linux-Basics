#+Title: Ansible automation for beginners
#+Author: Raghupathi Kammari
#+DATE: [15-11-2017 Wed]

* Introduction
This document describes about Ansible automation for beginners and to
install ansible on Debian-9 machines.

* What is Ansible?
- Ansible is a radically simple IT automation platform that makes your applications and systems easier to deploy.
- It support configuration management with examples as below.
 + Configuration of servers
 + Application deployment
 + Continuous testing of already install application
 + Provisioning 
 + Orchestration
 + Automation of tasks
* Why Ansible?
- Simple
 + Easy to write, read, maintain and evolve-without writing
scripts or custom code
- Fast to learn and setup
 + It uses a very simple language (YAML, in the form of
Ansible Playbooks) that allow you to describe your automation jobs in
a way that approaches plain English.Why Ansible?
- Efficient
 + Doesn't require a custom agent or software to install
 + Ansible works by connecting to your nodes and pushing
out small programs, called "Ansible modules" to them.
- Secure
 + No agent
 + Runs on OpenSSH
* Why Automation?
 + Tasks in code
 + Collaboration
 + Eliminate errors 
 + Write once
 + Laziness..etc….

* Installation of Ansible automation tool
On Debian-9/stretch machines
 - To install Anisble in Debian-9 machines using the following command
 #+BEGIN_EXAMPLE
 sudo apt-get update
 sudo apt-get install -y make git make python-setuptools gcc python-dev libffi-dev libssl-dev ansible
 #+END_EXAMPLE

* Inventary file
Ansible works against multiple systems in your infrastructure at the
same time. It does this by selecting portions of systems listed in
Ansible’s inventory file, which defaults to being saved in the
location /etc/ansible/hosts.

A group can have multiple server and one server can be a part of
multiple groups.  Name of group is enclosed in square brackets
*[]*. Server names can be their dns names or ip addresses.

Here I used the servers 192.168.0.1 and 192.168.0.2

 #+BEGIN_EXAMPLE
 [Web Servers]
 192.168.0.1
 192.168.0.2
 #+END_EXAMPLE

* SSH-keygen and SSH-copy-id
To run any module or playbook from local host to remote host, we need
to create and copy ssh keys to remote hosts by using *ssh-keygen* and
*ssh-copy-id*.

First we create ssh key by usng ssh-keygen command
 #+BEGIN_EXAMPLE
 [root@localhost ~]# ssh-keygen -t rsa -b 4096 -C "root@192.168.0.5"
 #+END_EXAMPLE
Then copy the ssh key to remote host by using ssh-copy-id command.
 #+BEGIN_EXAMPLE
 [root@localhost ~]# ssh-copy-id root@192.168.0.1
 #+END_EXAMPLE

* Ansible Modules
Ansible ships with a number of modules (called the ‘module library’)
that can be executed directly on remote hosts or through Playbooks.

Users can also write their own modules. These modules can control
system resources, like services, packages, or files (anything really),
or handle executing system commands.

* Ansible Playbooks
Playbooks are Ansible configuration,deployment of policies we want to
apply or enforce in the remote hosts they are in YAML begins with
*–*. It consists of a listing of modules and the arguments.

- Example:
 #+BEGIN_EXAMPLE
 ---
 hosts: web-servers
 user: root
 - name: install pip
   yum: pkg=python-pip state=installed
 #+END_EXAMPLE
The above code will install package pip in remote hosts. 
* Running Playbooks
To run a play book use ansible-playbook command.
 #+BEGIN_EXAMPLE
 [root@localhost ~]# ansible-playbook play.yml
 #+END_EXAMPLE
Hosts can be changed by providing a inventory file
 #+BEGIN_EXAMPLE
 [root@localhost ~]# ansible-playbook -i hosts play.yml
 #+END_EXAMPLE

* Installing nginx webserver with play
Create a YAML file and copy the following lines, save it
 #+BEGIN_EXAMPLE
---
- hosts: localhost
  user: root
  tasks:
- name: Install nginx
  apt: name=nginx state=present
- name: Start nginx
  service: name=nginx state=started enabled=yes
 #+END_EXAMPLE
Running YAML file
 #+BEGIN_EXAMPLE
 [root@localhost ~]# ansible-playbook -i hosts install-nginx.yml 
 #+END_EXAMPLE

* Roles
Roles are portable units of task organization in playbooks and is the
best way to organize your playbooks. 

Roles are just automation around =include= directives, and really
don’t contain much additional magic beyond some improvements to search
path handling for referenced files.

** Example Project Structure
 #+BEGIN_EXAMPLE
├── fooservers.yml
├── roles
│   ├── common
│   │   ├── defaults
│   │   ├── files
│   │   ├── handlers
│   │   ├── meta
│   │   ├── tasks
│   │   ├── templates
│   │   └── vars
│   └── webservers
│       └── tasks
├── site.yml
└── webservers.yml
 #+END_EXAMPLE
- Example playbook

 #+BEGIN_EXAMPLE
 ---
 - hosts: webservers
   roles:
     - common
     - webservers
 #+END_EXAMPLE

- Example Role
 #+BEGIN_EXAMPLE
 ---
- name: Install EPEL repo
  yum: name=epel-release state=present
- name: Install nginx server
  yum: name=nginx enablerepo=epel state=present
- name: Create static content directory
  file: path=/usr/share/nginx/static state=directory
 #+END_EXAMPLE
* Running playbooks with roles
Install mysql and apache server on webservers.
 #+BEGIN_EXAMPLE
  ---
 - hosts: webservers
   roles:
     - mysql
     - apache2
 #+END_EXAMPLE
