* What is Python?:
 - Python is an interpreted, Object-Oriented and high-level programming language. Which is used for internet scripting and database programming.
 - Python's simple, easy to learn syntax emphasizes readability and therefore reduces the cost of program maintenance. Python supports modules and packages,
   which encourages program modularity and code reuse. The Python interpreter and the extensive standard library are available in source or binary form without
   charge for all major platforms, and can be freely distributed. 
** Features of Python:
 + A variety of basic data types are available: numbers (floating point, complex, and unlimited-length long integers), strings (both ASCII and Unicode), lists, and dictionaries.
 + Python supports object-oriented programming with classes and multiple inheritance.
 + Code can be grouped into modules and packages.
 + The language supports raising and catching exceptions, resulting in cleaner error handling.
 + Data types are strongly and dynamically typed. Mixing incompatible types (e.g. attempting to add a string and a number) causes an exception to be raised, so errors are caught sooner.
 + Python contains advanced programming features such as generators and list comprehensions.
 + Python's automatic memory management frees you from having to manually allocate and free memory in your code.
* Why should you learn to write programs?
- Writing programs (or programming) is a very creative and rewarding activity. You can write programs for many reasons, ranging from making your living to solving
  a difficult, data analysis problem to having fun to helping someone else solve a problem. This book assumes that everyone needs to know how to program, and
  that once you know how to program you will figure out what you want to do with your newfound skills.
- We are surrounded in our daily lives with computers ranging from laptops to cell phones. We can think of these computers as our “personal assistants” who can take
  care of many things on our behalf. 
* Computer Hardware and Architecture:
- Before we start learning the language we speak to give instructions to computers to develop software, we need to learn a small amount about how computers are
  built. If you were to take apart your computer or cell phone and look deep inside,you would find the following parts:
** Central Processing Unit:
- The heart of any computer. It is what runs the software that we write; also called “CPU” or “the processor”.
** Input and Output Devices:
- Way we interact with our computer, which include the screen, keyboard, mouse microphone, speaker, touchpad, etc	
** Main Memory:
- Stores programs and data. Main memory loses its information. When the power is turned off.
** Secondary memory:
- Stores programs and data and retains its information even. when the power is turned off. Generally slower than main memory.
+ Ex-amples of secondary memory include disk drives and flash memory in USB sticks.
** Network connection:	
- Used to retrieve information over a network
** Network:
- Very slow place to store and retrieve data that might not always be "up"; can be considered a slower and more unreliable form of secondary memory
* What is Program?:
- The definition of a program at its most basic is a sequence of Python statements, that have been crafted to do something. Even our simple hello.py script is a pro-
  gram. It is a one-line program and is not particularly useful, but in the strictest definition, it is a Python program. It might be easiest to understand what a program is by thinking about a problem that a program might be built to solve,
  and then looking at a program that would solve that problem.
** Program:
- A set of instructions that specifies a computation.
** Programming:
- The act of writing instructions to the CPU down and getting instructions to be correct 
** Programmer:
- Skilled in the art of programming	
* Word and Sentences:
- The Python vocabulary is actually pretty small. We call this “vocabulary” the “reserved words”. These are words that have very special meaning to Python. When Python sees these words in a Python program, they
  have one and only one meaning to Python. Later as you write programs you will make up your own words that have meaning to you called variables. 
#+begin_example
print 'Hello world!'
#+end_example
+ And we have even written our first syntactically correct Python sentence. Our sentence starts with the reserved word print followed by a string of text of our choosing enclosed in single quotes.
** Python vocabulary:
- Reserved words; words that have one meaning to python	
** Variables:
- Make up words that have meaning to you; cannot use reserved words	
** Script:
- A text editor that we write the python instructions into a file, ends with .py	
** Semantics:
- The meaning of a program.
* Terminology: interpreter and compiler:
- Python is a high-level language intended to be relatively straightforward for hu-mans to read and write and for computers to read and process. Other high-level
  languages include Java, C++, PHP, Ruby, Basic, Perl, JavaScript, and many more. The actual hardware inside the Central Processing Unit (CPU) does not understand
  any of these high-level languages. The CPU understands a language we call machine language. Machine language is very simple and frankly very tiresome to write because it is represented all in
  zeros and ones:
#+begin_example
01010001110100100101010000001111
11100110000011101010010101101101
#+end_example
** Compile:
- To translate a program written in a high-level language into a low-level language all at once, in preparation for later execution.
** Interpreter:
- Reads the source code of the program as written by the programmer, parses the source code, and interprets the instructions on the fly, example is python
- To execute a program in a high-level language by translating it one line at a time.
#+begin_example
>>> x = 6
>>> print x
6
>>> y = x * 6
>>> print y
36
>>>
#+end_example
** High-Level Language:
- A programming language like Python, that is designed to be easy for humans to read and write.
** Low-level Language:
- A programming language that is designed to be easy for a computer to execute; also called “machine code” or “assembly language”.
** Machine Code:
- The lowest-level language for software, which is the language, that is directly executed by the central processing unit (CPU).
** Interactive mode:
- A way of using the Python interpreter by typing commands and expressions at the prompt.
* The building blocks of programs:
- We will learn more about the vocabulary, sentence struc-ture, paragraph structure, and story structure of Python. We will learn about the powerful capabilities of Python and how to compose those capabilities together to create useful programs.
- There are some low-level conceptual patterns that we use to construct programs. These constructs are not just for Python programs, they are part of every program- ming language from machine language up to the high-level languages.
** Input:
- Get data from the "outside world". examples include reading data from a file	
** Output:	
- Display the results of the program on a screen or store them in a file
** Sequential execution:
- Perform statements one after another in the order they are encountered in the script	
** Conditional execution:
- Check for certain conditions and then execute or skip a sequence of statements	
** Repeated execution	
- Perform some set of statements repeatedly, usually with some variation	
** Reuse:
- Write a set of instructions once, give them a name, and then reuse those instructions as needed throughout your program	
* What could possibly go wrong?:
- As we saw in our earliest conversations with Python, we must communicate very precisely when we write Python code. The smallest deviation or mistake will cause Python to give up looking at your program. Beginning programmers often take the fact that Python leaves no room for errors as evidence that Python is mean, hateful, and cruel.
  While Python seems to like everyone else, Python knows them personally and holds a grudge against them. Because of this grudge, Python takes our perfectly written programs and rejects
  them as “unfit” just to torment us.
#+begin_example
>>> primt 'Hello world!'
File "<stdin>", line 1
primt 'Hello world!'
ˆ
SyntaxError: invalid syntax
>>> primt 'Hello world'
File "<stdin>", line 1
primt 'Hello world'
ˆ
SyntaxError: invalid syntax
>>> I hate you Python!
File "<stdin>", line 1
I hate you Python!
ˆ
SyntaxError: invalid syntax
>>> if you come out of there, I would teach you a lesson
File "<stdin>", line 1
if you come out of there, I would teach you a lesson
ˆ
SyntaxError: invalid syntax
>>>
#+end_example
** Bug:
- An error in a program.
** Syntax Error:
- violated the "grammar rules of python	
** Logic Errors	
- The program has good syntax but there is a mistake in the order of the statements or perhaps in how the statements relate to one another	
** Semantic Errors:
- An error in a program that makes it do something other than what the programmer intended.
** Parse:
- To examine a program and analyze the syntactic structure.
** Portability:
- A property of a program that can run on more than one kind of computer.
** Print Statement:
- An instruction that causes the Python interpreter to display a value on the screen.
** Problem Solving:
- The process of formulating a problem, finding a solution, and expressing the solution.
** Prompt:
- When a program displays a message and pauses for the user to type some input to the program.
** Source code:
- A program in a high-level language.
* Varibale, Expressions and Statements:
** Values and types:
- A value is one of the basic things a program works with, like a letter or a number. The values we have seen so far are 1, 2, and 'Hello, World!'
- These values belong to different types: 2 is an integer, and 'Hello, World!' is a string, so called because it contains a “string” of letters. You (and the interpreter)
  can identify strings because they are enclosed in quotation marks.
- The print statement also works for integers. We use the python command to start the interpreter.
#+begin_example
python
>>> print 4
4
#+end_example
- If you are not sure what type a value has, the interpreter can tell you.
#+begin_example
>>> type('Hello, World!')
<type 'str'>
>>> type(17)
<type 'int'>
>>> type(3.2)
<type 'float'>
#+end_example
** Variables:
- A variable is a name that refers to a value.
- An assignment statement creates new variables and gives them values:
#+begin_example
>>> message = 'Hello Welcome To Python Programming Language'
>>> n = 17
>>> pi = 3.1415926535897931
#+end_example
- This example makes three assignments. The first assigns a string to a new vari-able named message; the second assigns the integer 17 to n; the third assigns the
  (approximate) value of π to pi.
- To display the value of a variable, you can use a print statement:
#+begin_example
>>> print n
17
>>> print pi
3.14159265359
#+end_example
- The type of a variable is the type of the value it refers to.
#+begin_example
>>> type(message)
<type 'str'>
>>> type(n)
<type 'int'>
>>> type(pi)
<type 'float'>
#+end_example
** Variable names and keywords:
- Programmers generally choose names for their variables that are meaningful and document what the variable is used for.
- Variable names can be arbitrarily long. They can contain both letters and numbers, but they cannot start with a number. It is legal to use uppercase letters, but it is a
  good idea to begin variable names with a lowercase letter (you’ll see why later).
+ Python reserves 31 keywords1 for its use:
#+begin_example
and as assert break class continue
def del elif else except exec
finally for from global if import
in is lambda not or pass print
raise return try while with yield
#+end_example
** Statements:
- A statement is a unit of code that the Python interpreter can execute. We have seen two kinds of statements: print and assignment.
- When you type a statement in interactive mode, the interpreter executes it and displays the result, if there is one.
- A script usually contains a sequence of statements. If there is more than one statement, the results appear one at a time as the statements execute.
- For example, the script
#+begin_example
print 1
x = 2
print x
#+end_example
+ produces the output
#+begin_example
1
2
#+end_example
** Operators and operands:
- Operators are special symbols that represent computations like addition and mul-tiplication. The values the operator is applied to are called operands.
- The operators +, -, *, /, and ** perform addition, subtraction, multiplication, division, and exponentiation, as in the following examples:
#+begin_example
20+32 hour-1 hour*60+minute minute/60 5**2 (5+9)*(15-7)
#+end_example
+ The division operator might not do what you expect:
#+begin_example
>>> minute = 59
>>> minute/60
0
#+end_example
** Expressions:
- An expression is a combination of values, variables, and operators. A value all by itself is considered an expression, and so is a variable, so the following are all
  legal expressions (assuming that the variable x has been assigned a value):
#+begin_example
17
x
x + 17
#+end_example
+ If you type an expression in interactive mode, the interpreter evaluates it and
  displays the result:
#+begin_example
>>> 1 + 1
2
#+end_example
** Order of operations:
- When more than one operator appears in an expression, the order of evaluation
  depends on the rules of precedence. For mathematical operators, Python follows
  mathematical convention. The acronym *PEMDAS* is a useful way to remember
  the rules:
 + *Parentheses* have the highest precedence and can be used to force an expres-
   sion to evaluate in the order you want. Since expressions in parentheses are
   evaluated first, 2 * (3-1) is 4, and (1+1)**(5-2) is 8. You can also use
   parentheses to make an expression easier to read, as in (minute * 100) /
   60, even if it doesn’t change the result.
 + *Exponentiation* has the next highest precedence, so 2**1+1 is 3, not 4, and
   3*1**3 is 3, not 27.
 + *Multiplication* and *Division* have the same precedence, which is higher than
   *Addition* and *Subtraction*, which also have the same precedence. So 2*3-1
   is 5, not 4, and 6+4/2 is 8, not 5.
 + Operators with the same precedence are evaluated from left to right. So the
   expression 5-3-1 is 1, not 3, because the 5-3 happens first and then 1 is
   subtracted from 2.
** Modulus operator:
- The modulus operator works on integers and yields the remainder when the first operand is divided by the second. In Python, the modulus operator is a percent
  sign (%). The syntax is the same as for other operators:
#+begin_example
>>> quotient = 7 / 3
>>> print quotient
2
>>> remainder = 7 % 3
>>> print remainder
1
#+end_example
** String operations:
- The + operator works with strings, but it is not addition in the mathematical sense. Instead it performs concatenation, which means joining the strings by linking
  them end to end. For example:
#+begin_example
>>> first = 10
>>> second = 15
>>> print first+second
25
>>> first = '100'
>>> second = '150'
>>> print first + second
100150
#+end_example
** Asking the user for input:
- Sometimes we would like to take the value for a variable from the user via their keyboard. Python provides a built-in function called raw_input that gets
  input from the keyboard. When this function is called, the program stops and waits for the user to type something. When the user presses Return or Enter, 
  the program resumes and raw_input returns what the user typed as a string.
#+begin_example
>>> input = raw_input()
My name is Raghu
>>> print input
My name is Raghu
#+end_example
+ Before getting input from the user, it is a good idea to print a prompt telling the user what to input. You can pass a string to raw_input to be displayed to the user
  before pausing for input:
#+begin_example
>>> name = raw_input('What is your name?\n')
What is your name?
Raghu
>>> print name
Raghu
#+end_example
+ The sequence \n at the end of the prompt represents a newline, which is a special character that causes a line break. That’s why the user’s input appears below the prompt.
+ If you expect the user to type an integer, you can try to convert the return value to int using the int() function:
#+begin_example
>>> prompt = 'What...is the airspeed velocity of an unladen swallow?\n'
>>> speed = raw_input(prompt)
What...is the airspeed velocity of an unladen swallow?
17
>>> int(speed)
17
>>> int(speed) + 5
22
#+end_example
 + But if the user types something other than a string of digits, you get an error:
#+begin_example
>>> speed = raw_input(prompt)
What...is the airspeed velocity of an unladen swallow?
What do you mean, an African or a European swallow?
>>> int(speed)
ValueError: invalid literal for int()
#+end_example
+ We will see how to handle this kind of error later.
** comment:
- Information in a program that is meant for other programmers (or any-one reading the source code) and has no effect on the execution of the pro-gram.
#+begin_example
# compute the percentage of the hour that has elapsed
percentage = (minute * 100) / 60
#+end_example
** Choosing mnemonic variable names:
- As long as you follow the simple rules of variable naming, and avoid reserved words, you have a lot of choice when you name your variables. In the beginning,
  this choice can be confusing both when you read a program and when you write your own programs. For example, the following three programs are identical in
  terms of what they accomplish, but very different when you read them and try to understand them.
#+begin_example
a = 35.0
b = 12.50
c = a * b
print c

hours = 35.0
rate = 12.50
pay = hours * rate
print pay

x1q3z9ahd = 35.0
x1q3z9afd = 12.50
x1q3p9afd = x1q3z9ahd * x1q3z9afd
print x1q3p9afd
#+end_example
** Debugging:
- At this point, the syntax error you are most likely to make is an illegal variable
  name, like class and yield, which are keywords, or odd ̃job and US$, which
  contain illegal characters.
- If you put a space in a variable name, Python thinks it is two operands without an
  operator:
#+begin_example
>>> bad name = 5
SyntaxError: invalid syntax
#+end_example
- For syntax errors, the error messages don’t help much. The most common
  messages are SyntaxError: invalid syntax and SyntaxError: invalid
  token, neither of which is very informative.
- The runtime error you are most likely to make is a “use before def;” that is, trying
  to use a variable before you have assigned a value. This can happen if you spell a
  variable name wrong:
#+begin_example
>>> principal = 327.68
>>> interest = principle * rate
NameError: name 'principle' is not defined
#+end_example
- Variables names are case sensitive, so LaTeX is not the same as latex.
** Glossary:
- *assignment*: A statement that assigns a value to a variable.
- *concatenate*: To join two operands end to end.
- *comment*: Information in a program that is meant for other programmers (or any-one reading the source code) and has no effect on the execution of the pro-gram.
- *evaluate*: To simplify an expression by performing the operations in order to yield a single value.
- *expression*: A combination of variables, operators, and values that represents a single result value.
- *floating point*: A type that represents numbers with fractional parts.
- *floor division*: The operation that divides two numbers and chops off the frac-tional part.
- *integer*: A type that represents whole numbers.
- *keyword*: A reserved word that is used by the compiler to parse a program; you cannot use keywords like if, def, and while as variable names.
- *mnemonic*: A memory aid. We often give variables mnemonic names to help us remember what is stored in the variable.
- *modulus operator*: An operator, denoted with a percent sign (%), that works on integers and yields the remainder when one number is divided by another.
- *operand*: One of the values on which an operator operates.
- *operator*: A special symbol that represents a simple computation like addition, multiplication, or string concatenation.
- *rules of precedence*: The set of rules governing the order in which expressions involving multiple operators and operands are evaluated.
- *statement*: A section of code that represents a command or action. So far, the statements we have seen are assignments and print statements.
- *string*: A type that represents sequences of characters.
- *type*: A category of values. The types we have seen so far are integers (type int), floating-point numbers (type float), and strings (type str).
- *value*: One of the basic units of data, like a number or string, that a program manipulates.
- *variable*: A name that refers to a value.
