* [[http://www.doc.ic.ac.uk/~wjk/UnixIntro/index.html][For More Information Click Here Online to Introduction Linux Course]]

* Terminal:
 - Terminal is a program which is used for text input/output environment.
 - As most people use an OS with a graphical user interface (GUI) for their day-to-day computer needs,
 - the use of a terminal emulator is a necessity for most Linux server users.

* Command:
 - A command is an instruction given by a user telling a computer to do something.
#+begin_example
  ex:- Such a run program.
#+end_example

* Command Line:
 - Command line is an interface for typing commands directly to a computer's operating system.

* Command Line Argument:
 - An argument, also called a command line argument, is a file name or other data that is provided to a command in order for the command to use it as an input.
   
* Linux Basic Commands:
#+begin_example
    +  echo hello world  (To display text line)
    +  passwd (to change the user password)
    +  date   (Display system date and time)
    +  hostname (domain name)
    +  arch (=linux= version architecture)
    +  uname -a (operating system version and kernal version)
    +  uptime (sytem time)
    +  who am i (user name)
    +  who (computer name)
    +  id (username and groups id)
    +  w (show who is logged and what they are doing)
    +  filename & ( & it indicates background program is processing)
    +  echo $SHELL (shell name)
    +  man (manual=menu in the list)
    +  man ls (you may need to press q to quit)
    +  man who (you may need to press q to quit)
    +  clear
    +  cal 2000
    +  echo 5+4 | bc -l
    +  time sleep 5
    +  history
#+end_example

* Directory and File Handling Commands:
#+begin_example
    + cd path
    + pwd
    + ls -al
    + cd .
    + cd ..
    + rm filename
    + rm -rf filename
    + rmdir dirname
    + cp source destination
    + cp -rd source destination
    + mv source destination
    + mkdir dirname
    + cat >>filename
    + cat filename
    + ls -l | more
#+end_example

* Making Hard and Soft (Symbolic) Links:
 - Direct (hard) and indirect (soft or symbolic) links from one file or directory to another can be created using the ln command.
#+begin_example
   +  $ ln filename linkname
#+end_example    
 - creates another directory entry for filename called linkname (i.e. linkname is a hard link). Both directory entries appear identical
   (and both now have a link count of 2). If either filename or linkname is modified,
   the change will be reflected in the other file (since they are in fact just two different directory entries pointing to the same file).
#+begin_example
   +  $ ln -s filename linkname
#+end_example 
 - creates a shortcut called linkname (i.e. linkname is a soft link). The shortcut appears as an entry with a special type ('l'):
#+begin_example
   +  $ ln -s hello.txt bye.txt 
#+end_example 

* File and Directory Permissions:
 - which is assign permissions or access to rights to users and groups of users. These systems control the ability of the users to view or make changes
   to the contents of the file system

#+begin_example
   * Owner  - a single person who owns the file.
   * Group  - every file belongs to a single group.
   * Others - everyone else who is not in the group or the owner.
#+end_example 

#+begin_example
  + chmod options files
#+end_example 

#+begin_example
 read = 4
 write = 2
 execute = 1
#+end_example 

#+begin_example
 chmod 777 file
#+end_example 
 - -R option which can be used to recursively modify file permissions.
#+begin_example
 chmod -R 777 file
#+end_example 

* Finding Files:
 - Find is a command which is used to search for files in a directory.

#+begin_example
 + find path -name filename
#+end_example 

* Finding Text in Files:
- grep is a command which is used to search word or number in files

#+begin_example
 +  grep options pattern files 
 +  grep hello *.txt
 +  grep 123 *
 +  grep '[0-9]' filename
 +  grep '[A-Z]' filename
 +  grep '[a-z]' filename
 +  grep '[[[[:alpha:]]]]' * file.txt
#+end_example

* Sed Command
- sed is a command, which is used to inline edit the file.
- for example i have file in that 1000 lines their, i want to edit perticular word.
#+begin_example
 + mkdir abc
 + touch file.txt myfile.txt
 + sed -e 's/original/edit/g' myfile.txt (s indicates source, 'g' option after the last slash tells sed to perform a global replace.)
 + sed -e 's/original*/edit/g' myfile.txt (* it indicates the all the charecters edit at once)
#+end_example

* Sorting files:
- sort is a command which is used for sorting lines in a group of files
#+begin_example
 +  sort filenames
#+end_example 

* Regular Language:
 - Regula language is a foraml language, that will support regular expression.
* Regular Expression:
 - A regular expression is a special text string for describing a string pattern.
* Advantage of RE:
 - Regular expressions can be used to perform all types of text search and text replace operations.
** Regular Expressions of  Basic Commands.
#+begin_example
 + rm -f file*     ( * means removing after anything)
 + rm -rf file*file (which means removing start with file and end with file)
 + rm -f file?     ( ? which indicates removed after file one matching occurence)
 + rm -f file??    ( ?? which indicates removed after file two matching occurence)
 + rm -f [A-Z]* or [a-z]* (which indicates from a-z or A-z matching files then removed)
 + rm -f [0-9]* (which indicates from 0-9 matching files then removed)
#+end_example 

* Tail Command:
 - tail is a command which is used to output the last part of files
#+begin_example
 + tail -2 filename (output of last two lines)
 + tail +2 filename (output of first two lines)
#+end_example 

* Which:
 - which is a command, it is used to shows the full path of shell commands.
#+begin_example
 + which
#+end_example

* Processes:
 - A process is an instance of a program running in a computer.

* Pipes:
 - A pipe ('|') operator is used to connect the output of one command to the input of another command
#+begin_example
 + ls | wc -l
 + cat filename | sort
 + cat filename | wc -l
 + cat filename | grep [a-b]
#+end_example

* Redirecting input and output:
 - A program can be told where to look for input and where to send output, using input/output redirection.
   Unix uses the "less than" and "greater than" special characters (< and >) to signify input and output redirection, respectively.
** Redirecting Input:
 - Using the "less-than" sign with a file name like this
#+begin_example
 ls < input 
#+end_example

** Redirecting Input:
 - Using the "greater-than" sign with a file name like this
#+begin_example
 + ls -l > output
#+end_example

* Web server:
 - Server is a machine.In which is respond to a request from a client.

* Client:
 - Cleint server is a machine in which is request a service from a server.

* Port:
 - Port is an endpoint of communication in an operating system.which specifies the process in the machine
   Port values range from 0-65535
** Uses:
 - Port Numbers are used for different services. When an application communicates over a certain port,
   it expects a specific type of connection with another system or application. Specifying port numbers ensure two systems communicate correctly. 

* Protocol:
 - which is a rules and govern the communication between two computers connected by the network.

* SSH (Secure Shell):
 - SSH is a Network protocol which is used for secure communication.
#+begin_example
 + The Secure Shell (SSH) Protocol by default uses port 22.
 * syntax:- ssh user@hostname
#+end_example

* SCP (Secure Copy):
 - SCP is a secure copy from between hosts on a network.
#+begin_example
 * syntax:- scp [options] user@host:sourcepath destination:path (copy from remote machine to local machine)
 * syntax:- scp [options] source:path user@host:destination:path (copy from local machine to remote machine)
#+end_example

* rsync (Remote Synchronized):
 - rsync is a remote synchronized command, which is used for copying files and directories remotely as well as locally in Linux/Unix systems.
#+begin_example
 * syntax:- rsync [options] user@host:sourcepath destination:path (copy from remote machine to local machine)
 * syntax:- rsync [options] source:path user@host:destination:path (copy from local machine to remote machine)
 * Options:-
  1). -a (archive mode)
  2). -b (make backups)
  3). -v (increase verbosity ex: status of copying files)
  4). -u (skip files that are newer on the receiver)
  5). -r (recursively)
#+end_example

* Difference between SCP and RSYNC:
 - Itâ€™s faster than scp (Secure Copy) because rsync uses remote-update protocol which allows to transfer just the
   differences between two sets of files. First time, it copies the whole content of a file or a directory from source to destination but from next time,
