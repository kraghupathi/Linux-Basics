#+Title:Docker
#+Author: kraghupathi
#+Date: 23 NOV, 2016
* Introduction to docker
Docker is an open platform for developing, shipping, and running
applications. Docker enables you to separate your applications from
your infrastructure so you can deliver software quickly. With Docker,
you can manage your infrastructure in the same ways you manage your
applications. By taking advantage of Docker¡¯s methodologies for
shipping, testing, and deploying code quickly, you can significantly
reduce the delay between writing code and running it in production.
* What is the Docker platform?
Docker provides the ability to package and run an application in a
loosely isolated environment called a container. The isolation and
security allow you to run many containers simultaneously on a given
host. Because of the lightweight nature of containers, which run
without the extra load of a hypervisor, you can run more containers on
a given hardware combination than if you were using virtual machines.

Docker provides tooling and a platform to manage the lifecycle of your
containers:
- Encapsulate your applications (and supporting components) into Docker containers
- Distribute and ship those containers to your teams for further development and testing
- Deploy those applications to your production environment, whether it is in a local data center or the Cloud
* What is Docker Engine?
Docker Engine is a client-server application with these major components:
- A server which is a type of long-running program called a daemon process.
- A REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do.
- A command line interface (CLI) client.
-----------------------------
docker-engine.png (image)
-----------------------------
The CLI uses the Docker REST API to control or interact with the
Docker daemon through scripting or direct CLI commands. Many other
Docker applications use the underlying API and CLI.

The daemon creates and manages Docker objects, such as images,
containers, networks, and data volumes.
* What can I use Docker for?
- Fast, consistent delivery of your applications
  + Docker can streamline the development lifecycle by allowing
    developers to work in standardized environments using local
    containers which provide your applications and services. You can
    also integrate Docker into your continuous integration and
    continuous deployment (CI/CD) workflow.

 + Consider the following example scenario. Your developers write code
   locally and share their work with their colleagues using Docker
   containers. They can use Docker to push their applications into a
   test environment and execute automated and manual tests. When
   developers find problems, they can fix them in the development
   environment and redeploy them to the test environment for
   testing. When testing is complete, getting the fix to the customer
   is as simple as pushing the updated image to the production
   environment.
- Responsive deployment and scaling
 + Docker¡¯s container-based platform allows for highly portable
   workloads. Docker containers can run on a developer¡¯s local host,
   on physical or virtual machines in a data center, in the Cloud, or
   in a mixture of environments.

 + Docker¡¯s portability and lightweight nature also make it easy to
   dynamically manage workloads, scaling up or tearing down
   applications and services as business needs dictate, in near real
   time.
- Running more workloads on the same hardware
 + Docker is lightweight and fast. It provides a viable,
   cost-effective alternative to hypervisor-based virtual machines,
   allowing you to use more of your compute capacity to achieve your
   business goals. This is useful in high density environments and for
   small and medium deployments where you need to do more with fewer
   resources.
* What is Docker¡¯s architecture?
Docker uses a client-server architecture. The Docker client talks to
the Docker daemon, which does the heavy lifting of building, running,
and distributing your Docker containers. The Docker client and daemon
can run on the same system, or you can connect a Docker client to a
remote Docker daemon. The Docker client and daemon communicate using a
REST API, over UNIX sockets or a network interface.
--------------------
docket-architecture.png(image)
------------------------------
** The Docker daemon
The Docker daemon runs on a host machine. The user uses the Docker client to interact with the daemon.
** The Docker client
The Docker client, in the form of the docker binary, is the primary
user interface to Docker. It accepts commands and configuration flags
from the user and communicates with a Docker daemon. One client can
even communicate with multiple unrelated daemons.
** Inside Docker
To understand Docker¡¯s internals, you need to know about images, registries, and containers.
** Docker images
A Docker image is a read-only template with instructions for creating
a Docker container. For example, an image might contain an Ubuntu
operating system with Apache web server and your web application
installed. You can build or update images from scratch or download and
use images created by others. An image may be based on, or may extend,
one or more other images. A docker image is described in text file
called a Dockerfile, which has a simple, well-defined syntax. For more
details about images, see How does a Docker image work?.

Docker images are the *build* component of Docker.
** Docker containers
A Docker container is a runnable instance of a Docker image. You can
run, start, stop, move, or delete a container using Docker API or CLI
commands. When you run a container, you can provide configuration
metadata such as networking information or environment variables. Each
container is an isolated and secure application platform, but can be
given access to resources running in a different host or container, as
well as persistent storage or databases. For more details about
containers, see How does a container work?.

Docker containers are the *run* component of Docker.
** Docker registries
A docker registry is a library of images. A registry can be public or
private, and can be on the same server as the Docker daemon or Docker
client, or on a totally separate server. For more details about
registries, see How does a Docker registry work?

Docker registries are the *distribution* component of Docker.
** Docker services
A Docker service allows a swarm of Docker nodes to work together,
running a defined number of instances of a replica task, which is
itself a Docker image. You can specify the number of concurrent
replica tasks to run, and the swarm manager ensures that the load is
spread evenly across the worker nodes. To the consumer, the Docker
service appears to be a single application. Docker Engine supports
swarm mode in Docker 1.12 and higher.

Docker services are the *scalability* component of Docker.
** How does a Docker image work?
Docker images are read-only templates from which Docker containers are
instantiated. Each image consists of a series of layers. Docker uses
[[https://en.wikipedia.org/wiki/UnionFS][union file systems]] to combine these layers into a single image. Union
file systems allow files and directories of separate file systems,
known as branches, to be transparently overlaid, forming a single
coherent file system.

These layers are one of the reasons Docker is so lightweight. When you
change a Docker image, such as when you update an application to a new
version, a new layer is built and replaces only the layer it
updates. The other layers remain intact. To distribute the update, you
only need to transfer the updated layer. Layering speeds up
distribution of Docker images. Docker determines which layers need to
be updated at runtime.

An image is defined in a Dockerfile. Every image starts from a base
image, such as ubuntu, a base Ubuntu image, or fedora, a base Fedora
image. You can also use images of your own as the basis for a new
image, for example if you have a base Apache image you could use this
as the base of all your web application images. The base image is
defined using the FROM keyword in the dockerfile.

*Note*: [[https://hub.docker.com/][Docker Hub]] is a public registry and stores images.

The docker image is built from the base image using a simple,
descriptive set of steps we call =instructions=, which are stored in a
Dockerfile. Each instruction creates a new layer in the image. Some
examples of *Dockerfile* instructions are:
- Specify the base image (FROM)
- Specify the maintainer (MAINTAINER)
- Run a command (RUN)
- Add a file or directory (ADD)
- Create an environment variable (ENV)
- What process to run when launching a container from this image (CMD)

Docker reads this =Dockerfile= when you request a build of an image, executes the instructions, and returns the image.
** How does a Docker registry work?
A Docker registry stores Docker images. After you build a Docker
image, you can push it to a public registry such as [[https://hub.docker.com/][Docker Hub]] or to a
private registry running behind your firewall. You can also search for
existing images and pull them from the registry to a host.

[[https://hub.docker.com/][Docker Hub]] is a public Docker registry which serves a huge collection
of existing images and allows you to contribute your own. For more
information, go to [[https://docs.docker.com/registry/][Docker Registry]] and [[https://docs.docker.com/datacenter/dtr/2.0/][Docker Trusted Registry]].

[[https://store.docker.com/][Docker store]] allows you to buy and sell Docker images. For image, you
can buy a Docker image containing an application or service from the
software vendor, and use the image to deploy the application into your
testing, staging, and production environments, and upgrade the
application by pulling the new version of the image and redeploying
the containers. Docker Store is currently in private beta.
** How does a container work?
A container uses the host machine¡¯s Linux kernel, and consists of any
extra files you add when the image is created, along with metadata
associated with the container at creation or when the container is
started. Each container is built from an image. The image defines the
container¡¯s contents, which process to run when the container is
launched, and a variety of other configuration details. The Docker
image is read-only. When Docker runs a container from an image, it
adds a read-write layer on top of the image (using a UnionFS as we saw
earlier) in which your application runs.
** What happens when you run a container?
When you use the docker run CLI command or the equivalent API, the
Docker Engine client instructs the Docker daemon to run a
container. This example tells the Docker daemon to run a container
using the ubuntu Docker image, to remain in the foreground in
interactive mode (-i), and to run the /bin/bash command.
#+BEGIN_EXAMPLE
$ docker run -i -t ubuntu /bin/bash
#+END_EXAMPLE
When you run this command, Docker Engine does the following:

- *Pulls the* ubuntu *image*: Docker Engine checks for the presence of the
  ubuntu image. If the image already exists locally, Docker Engine
  uses it for the new container. Otherwise, then Docker Engine pulls
  it from [[https://hub.docker.com/][Docker Hub]].
- *Creates a new container:* Docker uses the image to create a container.
- *Allocates a filesystem and mounts a read-write layer:* The container is created in the file system and a read-write layer is added to the image.
- *Allocates a network / bridge interface:* Creates a network interface that allows the Docker container to talk to the local host.
- *Sets up an IP address:* Finds and attaches an available IP address from a pool.
- *Executes a process that you specify:* Executes the /bin/bash executable.
- *Captures and provides application output:* Connects and logs standard input, outputs and errors for you to see how your application is running, because you requested interactive mode.

Your container is now running. You can manage and interact with it,
use the services and applications it provides, and eventually stop and
remove it.
** The underlying technology
Docker is written in [[https://golang.org/][Go]] and takes advantage of several features of the Linux kernel to deliver its functionality.
** Namespaces
Docker uses a technology called namespaces to provide the isolated
workspace called the container. When you run a container, Docker
creates a set of namespaces for that container.

These namespaces provide a layer of isolation. Each aspect of a
container runs in a separate namespace and its access is limited to
that namespace.

Docker Engine uses namespaces such as the following on Linux:
- *The* pid *namespace:* Process isolation (PID: Process ID).
- *The* net *namespace:* Managing network interfaces (NET: Networking).
- *The* ipc *namespace:* Managing access to IPC resources (IPC: InterProcess Communication).
- *The* mnt *namespace:* Managing filesystem mount points (MNT: Mount).
- *The* uts *namespace:* Isolating kernel and version identifiers. (UTS: Unix Timesharing System).
** Control groups
Docker Engine on Linux also relies on another technology called
control groups (cgroups). A cgroup limits an application to a specific
set of resources. Control groups allow Docker Engine to share
available hardware resources to containers and optionally enforce
limits and constraints. For example, you can limit the memory
available to a specific container.
** Union file systems
Union file systems, or UnionFS, are file systems that operate by
creating layers, making them very lightweight and fast. Docker Engine
uses UnionFS to provide the building blocks for containers. Docker
Engine can use multiple UnionFS variants, including AUFS, btrfs, vfs,
and DeviceMapper.
** Container format
Docker Engine combines the namespaces, control groups, and UnionFS
into a wrapper called a container format. The default container format
is =libcontainer=. In the future, Docker may support other container
formats by integrating with technologies such as BSD Jails or Solaris
Zones.
** Install Operating system
   - Install Ubuntu 14.04 
** Install Docker 
   - Prerequisites 
     + Kernel must be at minimum 3.10
     + Check your kernel
       #+BEGIN_EXAMPLE
       uname -r 
       3.11.0-15-generic
       #+END_EXAMPLE
   - Update your APT sources
     + Log into your machine as a user sith sudo or root privileges.
     + Open a terminal
     + Update package information 
       #+BEGIN_EXAMPLE
       $ sudo apt-get update
       $ sudo apt-get install apt-transport-https ca-certificates
       #+END_EXAMPLE
     + Add the new GPG key
       #+BEGIN_EXAMPLE
       $ sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
       #+END_EXAMPLE
   - Apt repositories
     #+BEGIN_EXAMPLE
     Precise 12.04 (LTS) 	deb https://apt.dockerproject.org/repo ubuntu-precise main
     Trusty 14.04 (LTS) 	deb https://apt.dockerproject.org/repo ubuntu-trusty main
     Wily 15.10 	deb https://apt.dockerproject.org/repo ubuntu-wily main
     Xenial 16.04 (LTS) 	deb https://apt.dockerproject.org/repo ubuntu-xenial main
     #+END_EXAMPLE
   - Choose the appropriate apt repositories and run the following
     command.
     #+BEGIN_EXAMPLE
     $ echo "<REPO>" | sudo tee /etc/apt/sources.list.d/docker.list
     #+END_EXAMPLE
   - Update 
     #+BEGIN_EXAMPLE
     sudo apt-get update
     #+END_EXAMPLE
   - Install recommended packages 
     #+BEGIN_EXAMPLE
     $ sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual
     #+END_EXAMPLE
   - Install Docker 
     #+BEGIN_EXAMPLE
     $ sudo apt-get install docker-engine
     #+END_EXAMPLE
  
   - Start the docker daemon.
    #+BEGIN_EXAMPLE
    $ sudo service docker start
    #+END_EXAMPLE
   - Verify docker is installed correctly.
     #+BEGIN_EXAMPLE
     $ sudo docker run hello-world
     #+END_EXAMPLE
This command downloads a test image and runs it in a container. When the container runs, it prints an informational message. Then, it exits.
** Launch your first container 
   Launch or execute a command in container using =docker run= command. This
   command will launch a container from an image, execute your command 
   display output on terminal, stop container and  exit out.

   #+BEGIN_SRC command
   docker run-->create container->run-container-->execute command-->show
   output-->exit from container-->stop container
   #+END_SRC

   #+BEGIN_SRC command
   $ sudo docker run [options] [image] [command] [args]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ sudo docker run ubuntu:14.04 echo "Hello Docker"
   $ Hello Docker
   #+END_SRC
   If the ubuntu:14.04 image is not present locally it will download it, will
   create a container and then will execute the command =echo=. After this it
   will exit the container and the container is stopped.

** Create/Start/Stop/Restart/Destroy your container  
   A container is a runtime instance of a docker image.
 + Create a new container ::
   #+BEGIN_SRC command
   $ docker create [OPTIONS] IMAGE [COMMAND] [ARG...]
   #+END_SRC
   For example:
   #+BEGIN_SRC command 
   $ docker create -it ubuntu:14.04 echo "Hello World"
   #+END_SRC 
   + =docker create= command can be used to set up a container configuration ahead of time so
     that it is ready to start when you need it.
   + Creates a writeable container layer over the specified image.   
   + A container created does not start on it's own and is to be started.
 + Start a container ::
   #+BEGIN_SRC command
   $ docker start [OPTIONS] CONTAINER [CONTAINER...]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker start e76ccff0a41a
   e76ccff0a41a
   #+END_SRC
 + To stop one or more containers ::
   #+BEGIN_SRC command
   $ docker stop [OPTIONS] CONTAINER [CONTAINER...]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker stop e76ccff0a41a
   e76ccff0a41a
   #+END_SRC
+  To restart one or more container ::
   #+BEGIN_SRC command
   $ docker restart [OPTIONS] CONTAINER [CONTAINER...]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker restart e76ccff0a41a
   e76ccff0a41a
   #+END_SRC
 + Destroy a container ::
   #+BEGIN_SRC command
   $ docker rm [OPTIONS] CONTAINER [CONTAINER...]
   #+END_SRC
   + You can destroy one or more containers at a time
   + You cannot delete a container which is currently running. So first stop the
     container and then delete it.
   #+BEGIN_SRC command
   $ docker stop e76ccff0a41a
   e76ccff0a41a
   $ docker rm e76ccff0a41a
   e76ccff0a41a
   #+END_SRC
** Naming a container
   + If you do not specify the name of the container docker will automatically
     assume any random name.
   + To give name to a container:
     #+BEGIN_SRC command
     $ docker run [options] -name <name of container> <image> <command>  
     #+END_SRC
     For Example:
     #+BEGIN_SRC command
     $ docker run -it -name lab1_cse01 ubuntu:14.04 bash
     root@8c2fc6ba883b:~#  
     #+END_SRC
   + You can always rename your container
     #+BEGIN_SRC command
     $ docker rename [OPTIONS] OLD_NAME NEW_NAME
     #+END_SRC
     For Example:
     #+BEGIN_SRC command
     $ docker rename lab1_cae01 lab2_cse02
     #+END_SRC
** Giving a hostname to container
 + To give host name to container you must use =-h= flag with the =docker run= command:
   #+BEGIN_SRC command 
   $ docker run -h <hostname> [options] [image] [command]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker run -h new_ctnd -it ubuntu:14.04 bash
   root@new_cntd:~#
   #+END_SRC
** List containers
   =docker ps= command is used to list containers in host machine. Depending on
   the flags provided, it displays information of stopped or running containers.  
   #+BEGIN_SRC command
   $ docker ps [options]
   #+END_SRC

 + List the containers which are currently running ::
   #+BEGIN_SRC command 
   $ docker ps
   CONTAINER ID    IMAGE          COMMAND    CREATED              STATUS              PORTS           NAMES
   07c5614d5a40    ubuntu:14.04   "bash"     About a minute ago   Up About a minute                   evil_fermi
   e76ccff0a41a    ubuntu:14.04   "bash"     4 days ago           Up 12 minutes                       stoic_bhabha
   #+END_SRC
 
 + List all the containers(both running and stopped) ::
   #+BEGIN_SRC command
   $ docker ps -a
   CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                    PORTS               NAMES
   07c5614d5a40        ubuntu:14.04             "bash"              5 minutes ago       Up 5 minutes                                  evil_fermi
   e76ccff0a41a        ubuntu:14.04             "bash"              4 days ago          Up 15 minutes                                 stoic_bhabha
   ca251b8c44d8        ubuntu:14.04             "bash"              4 days ago          Exited (0) 4 days ago                         sad_wright
   58d28030aa5e        ubuntu:14.04             "bash"              4 days ago          Exited (0) 4 days ago                         jolly_raman
   34ab6efd089f        lab/problem-solving:01   "bash"              5 days ago          Exited (0) 4 days ago                         insane_yalow
   4164528c53c3        ubuntu:14.04             "bash"              5 days ago          Exited (0) 4 days ago                         pensive_hypatia
   ec164228902a        ubuntu:14.04             "bash"              5 days ago          Exited (0) 21 hours ago                       tiny_aryabhata
   8c2fc6ba883b        ubuntu:14.04             "bash"              5 days ago          Exited (0) 30 hours ago                       new-name
   #+END_SRC
    OR
   #+BEGIN_SRC command
   $ docker ps -as
   CONTAINER ID        IMAGE                    COMMAND             CREATED             STATUS                    PORTS               NAMES               SIZE
   07c5614d5a40        ubuntu:14.04             "bash"              6 minutes ago       Up 6 minutes                                  evil_fermi          0 B (virtual 188 MB)
   e76ccff0a41a        ubuntu:14.04             "bash"              4 days ago          Up 17 minutes                                 stoic_bhabha        164 B (virtual 188 MB)
   ca251b8c44d8        ubuntu:14.04             "bash"              4 days ago          Exited (0) 4 days ago                         sad_wright          203.8 kB (virtual 188.2 MB)
   58d28030aa5e        ubuntu:14.04             "bash"              4 days ago          Exited (0) 4 days ago                         jolly_raman         63.87 MB (virtual 251.8 MB)
   34ab6efd089f        lab/problem-solving:01   "bash"              5 days ago          Exited (0) 4 days ago                         insane_yalow        1.385 MB (virtual 788.7 MB)
   4164528c53c3        ubuntu:14.04             "bash"              5 days ago          Exited (0) 4 days ago                         pensive_hypatia     153.1 MB (virtual 341.1 MB)
   ec164228902a        ubuntu:14.04             "bash"              5 days ago          Exited (0) 21 hours ago                       tiny_aryabhata      1.25 GB (virtual 1.438 GB)
   8c2fc6ba883b        ubuntu:14.04             "bash"              5 days ago          Exited (0) 30 hours ago                       new-name            0 B (virtual 188 MB)
   #+END_SRC
   + flag =a= to view all containers
   + flag =s= to view size of containers
** List images
   List all the images currently sitting in your local repository/system
   #+BEGIN_SRC command
   $ docker images
   REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE
   labs/speech-recog     latest              1e85be4efa89        5 days ago          341.1 MB
   lab/problem-solving   01                  be7d953b67e6        5 days ago          787.3 MB
   meghanab/myapp        1.0                 08570d8b4a10        13 days ago         267.3 MB
   meghana/new_image1    0.1                 2934249749c9        2 weeks ago         252.9 MB
   meghana/new_user      1                   b5900443b2d7        2 weeks ago         188.3 MB
   centos                7                   904d6c400333        3 weeks ago         196.8 MB
   ubuntu                14.04               8f1bd21bd25c        4 weeks ago         188 MB
   #+END_SRC
** List processes running inside a container 
 + Display the running processes of a container ::
   #+BEGIN_SRC command
   $ docker top [container]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker top ec164228902a
   UID            PID             PPID           C              STIME           TTY            TIME             CMD
   root           5207            5192           0              20:32           pts/9          00:00:00         bash
   #+END_SRC   
** Running your container in detached mode
   + To run a container in the background as soon as it is created you have to
     specify =-d= flag along with the =docker run= command
     #+BEGIN_SRC command
     $ docker run -d [image] [command]
     #+END_SRC
     + This will run the command in the background and will automatically shuts down
       the container after its execution
     For Example:
     #+BEGIN_SRC command
     $ docker run -d ubuntu:14.04 bash
     698de53f5f4b151122e18b51d4abb813b4e1dff10e30472791dd5ec336fb4b10
     $
     #+END_SRC 
** Execute a command inside a container from host machine 
 + You can execute a command inside a container from the host machine
   provided the container is in running state. Otherwise you have to start
   the container first and then use the following command
   #+BEGIN_SRC command
   $ docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
   #+END_SRC
   For example:
   #+BEGIN_SRC command
   root@meghana / $ docker ps
   CONTAINER ID   IMAGE          COMMAND      CREATED        STATUS              PORTS               NAMES
   e76ccff0a41a   ubuntu:14.04   "bash"       2 days ago     Up About an hour                        stoic_bhabha
 
   root@meghana / $ docker exec e76ccff0a41a ping 127.0.0.1 -c 5
   PING 127.0.0.1 (127.0.0.1) 56(84) bytes of data.
   64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.050 ms
   64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.053 ms
   64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.055 ms
   64 bytes from 127.0.0.1: icmp_seq=4 ttl=64 time=0.033 ms
   64 bytes from 127.0.0.1: icmp_seq=5 ttl=64 time=0.054 ms

   --- 127.0.0.1 ping statistics ---
   5 packets transmitted, 5 received, 0% packet loss, time 3997ms
   rtt min/avg/max/mdev = 0.033/0.049/0.055/0.008 ms
   #+END_SRC
   + You can use various flags with this command
   #+BEGIN_SRC command
     -d                Detached mode: run command in the background
     -i                Keep STDIN open even if not attached
     -t                Allocate a pseudo Terminal
   #+END_SRC
** Get inside a container 
   To get terminal access to container you need to fire some commands. This may be
   required to install packages and configure them inside your container.
 + Case 1 :: 
   If you want to enter into a container as soon as you create it:
   #+BEGIN_SRC command
   $ docker run -it <repository>:<tag> bash
   #+END_SRC
   + =-i= flag to connect STDIN on the container
   + =-t= flag to get a pseudo terminal
   For Example:
   #+BEGIN_SRC command
   $ docker run -it ubuntua:14.04 bash
   root@ec164228902a:~#
   #+END_SRC

 + Case 2 :: 
   If you fire =bash= command inside a container, it runs forever, until
   manually stopped. By giving =-d= flag to =docker run=  a container executes
   and runs in detached mode, with no interaction with user. So to get inside a
   container which is running in detached mode:
   + Method 1 :: 
     + Using exec command
     #+BEGIN_SRC comand
     $ docker exec -it <Container ID> bash
     #+END_SRC
     For Example:
     #+BEGIN_SRC command
     $ docker exec -it ec164228902a bash
     root@ec164228902a:~#
     #+END_SRC
     + To come out of the container without stopping it ::
     #+BEGIN_SRC command 
     CTRL+P CTRL+Q
     #+END_SRC
       OR
     #+BEGIN_SRC command
     # exit
     #+END_SRC
     For example you are inside the container =ec164228902a=:
     #+BEGIN_SRC command
     root@ec164228902a:~# exit
     root@meghana ~ $
     root@meghana ~ $ docker ps
     CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
     07c5614d5a40        ubuntu:14.04        "bash"              21 minutes ago      Up 21 minutes                           evil_fermi
     ec164228902a        ubuntu:14.04        "bash"              4 days ago          Up 32 minutes                           stoic_bhabha
     #+END_SRC
   + Method 2 :: 
     + Using Attach command
     #+BEGIN_SRC command
     $ docker attach <Container ID>
     #+END_SRC
     + You might need to hit Enter to bring up the prompt.
     For Example:
     #+BEGIN_SRC command
     $ docker attach ec164228902
     $
     root@ec164228902:~#
     #+END_SRC
     + To come out of the container without stopping it ::
     #+BEGIN_SRC command
     CTRL+P+Q
     #+END_SRC
** Auto restart Containers 
   If your host machine shuts down, all container will be stopped. Once your
   restart your machine, all container should automatically start. To add such
   behavior to all your containers, you need to add a flag =--restart= in
   =docker run= command. 
   #+BEGIN_SRC command
   $ docker run [options] --restart=always [image] [command]
   #+END_SRC
   For Example:
   #+BEGIN_SRC command
   $ docker run -d -it --restart=always meghanab/app1:0.1 bash
   #+END_SRC
   + We need to specify whether you want to auto-start your container at the
     time of its creation itself.
** Resource allocation options for Docker containers
   + Using the =-m= flag with =docker run= command we can limit the memory(RAM)
     usage of the containers
     #+BEGIN_SRC command
     $ docker run -m [] [options] [image] [command]
     #+END_SRC
     For Example:
     #+BEGIN_SRC command
     $ docker run -d -it -m 300M ubuntu:14.04 bash
     WARNING: Your kernel does not support swap limit capabilities, memory limited without swap.
     b172827cb899f36e35e0fa587e6f30793f0ed37befe76a1e77b2f9cacc8c905a
     $  docker stats --no-stream=true
     CONTAINER           CPU %               MEM USAGE / LIMIT       MEM %               NET I/O             BLOCK I/O           PIDS
     b172827cb899        0.00%               712.7 kB / =314.6 MB=   0.23%               4.064 kB / 648 B    114.7 kB / 0 B      0
     ec164228902a        0.00%               4.375 MB / 4.064 GB     0.11%               12.37 kB / 648 B    4.071 MB / 0 B      0
     #+END_SRC
     + Thus here we are able to limit the RAM to 300MB
     + While for the other container it is 4GB as we didn't mention anything during
       its creation, so it takes 4GB(host system RAM) by default.
     + Here the =-d= flag lets the container run in detached mode
